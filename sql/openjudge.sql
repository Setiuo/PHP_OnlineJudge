-- phpMyAdmin SQL Dump
-- version phpStudy 2014
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2019 年 04 月 30 日 19:56
-- 服务器版本: 5.5.53
-- PHP 版本: 5.4.45

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `openjudge`
--

-- --------------------------------------------------------

--
-- 表的结构 `oj_constatus`
--

CREATE TABLE IF NOT EXISTS `oj_constatus` (
  `RunID` int(11) NOT NULL COMMENT '运行ID',
  `ConID` int(11) NOT NULL COMMENT '比赛ID',
  `User` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '用户',
  `Problem` int(11) NOT NULL COMMENT '问题编号',
  `Status` int(11) NOT NULL COMMENT '状态',
  `UseTime` int(11) NOT NULL COMMENT '耗时',
  `UseMemory` int(11) NOT NULL COMMENT '耗用内存',
  `Language` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '语言',
  `CodeLen` int(11) NOT NULL COMMENT '代码长度',
  `SubTime` datetime NOT NULL COMMENT '提交时间',
  `AllStatus` varchar(1000) COLLATE utf8_bin NOT NULL COMMENT '测试点状态',
  `Show` int(11) NOT NULL COMMENT '是否显示',
  `Judger` varchar(20) COLLATE utf8_bin NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_constatus`
--

INSERT INTO `oj_constatus` (`RunID`, `ConID`, `User`, `Problem`, `Status`, `UseTime`, `UseMemory`, `Language`, `CodeLen`, `SubTime`, `AllStatus`, `Show`, `Judger`) VALUES
(21, 2, '吴泽', 0, 4, 0, 5208, 'C++', 118, '2019-03-09 16:14:45', '1&4&0&5208&0x0|2&4&0&4864&0x0|3&4&0&4868&0x0|4&4&0&4864&0x0|5&4&0&4876&0x0|6&4&0&4864&0x0|7&4&0&4864&0x0|8&4&0&4864&0x0|9&4&0&4864&0x0|10&4&0&4868&0x0', 1, 'Judger_Contest'),
(22, 2, '吴泽', 0, 8, 0, 4860, 'C++', 120, '2019-03-09 16:22:56', '1&8&0&4860&0x0|2&8&0&4860&0x0|3&8&0&4860&0x0|4&8&0&4860&0x0|5&8&0&4860&0x0|6&8&0&4860&0x0|7&8&0&4860&0x0|8&8&0&4860&0x0|9&8&0&4860&0x0|10&8&0&4860&0x0', 1, 'Judger_Contest'),
(23, 2, '吴泽', 0, 4, 31, 1340, 'C++', 118, '2019-03-09 17:27:42', '1&4&15&1340&0x0|2&4&0&1296&0x0|3&4&0&1304&0x0|4&4&15&1292&0x0|5&4&15&1288&0x0|6&4&31&1288&0x0|7&4&31&1292&0x0|8&4&0&1300&0x0|9&4&0&1284&0x0|10&4&0&1288&0x0', 1, 'Judger_Contest'),
(24, 2, '肖江', 0, 4, 15, 5208, 'C++', 118, '2019-03-09 17:27:58', '1&4&0&5208&0x0|2&4&0&4864&0x0|3&4&0&4876&0x0|4&4&0&4864&0x0|5&4&0&4868&0x0|6&4&0&4864&0x0|7&4&0&4864&0x0|8&4&15&4864&0x0|9&4&0&4864&0x0|10&4&15&4864&0x0', 1, 'Judger_Contest'),
(25, 2, '肖江', 1, 4, 15, 5184, 'C++', 83, '2019-03-09 17:50:33', '1&4&15&5184&0x0', 1, 'Judger_Contest'),
(26, 2, '肖江', 4, 4, 15, 1404, 'C++', 338, '2019-03-09 18:09:37', '1&4&0&1404&0x0|2&4&15&1336&0x0|3&4&15&1340&0x0|4&4&15&1340&0x0|5&4&0&1344&0x0|6&4&15&1340&0x0|7&4&0&1344&0x0|8&4&0&1340&0x0|9&4&0&1340&0x0|10&4&15&1340&0x0|11&4&15&1348&0x0', 1, 'Judger_Contest'),
(27, 2, '吴泽', 6, 9, 671, 10844, 'C++', 1090, '2019-03-09 18:12:00', '1&4&0&5064&0x0|2&4&0&5064&0x0|6&8&593&10844&0x0|7&9&0&5348&0xc0000005|8&4&671&10724&0x0', 1, 'Judger_Contest'),
(42, 3, '吴泽的父亲', 4, 4, 187, 34348, 'Java', 424, '2019-03-18 11:32:12', '1&4&78&22120&0x0|2&4&156&22140&0x0|3&4&187&25408&0x0|4&4&171&34348&0x0|5&4&78&22012&0x0', 1, 'Judger_Contest'),
(43, 3, '吴泽的父亲', 4, 4, 250, 33960, 'Java', 424, '2019-03-18 11:32:14', '1&4&78&21964&0x0|2&4&156&22144&0x0|3&4&203&25800&0x0|4&4&250&33960&0x0|5&4&187&22020&0x0', 1, 'Judger_Contest'),
(44, 3, '肖江', 0, 4, 15, 1512, 'Gcc', 615, '2019-03-18 16:15:05', '1&4&15&1512&0x0|2&4&0&1456&0x0|3&4&0&1456&0x0|4&4&0&1460&0x0|5&4&15&1480&0x0', 1, 'Judger_Contest'),
(45, 3, '肖江', 1, 4, 62, 1428, 'C++', 629, '2019-03-18 16:28:59', '1&4&0&1428&0x0|2&4&0&1372&0x0|3&4&0&1368&0x0|4&4&0&1376&0x0|5&4&15&1376&0x0|6&4&0&1368&0x0|7&4&0&1368&0x0|8&4&62&1376&0x0', 1, 'Judger_Contest'),
(46, 3, '吴泽', 1, 4, 62, 1420, 'C++', 629, '2019-03-18 16:29:58', '1&4&31&1420&0x0|2&4&0&1372&0x0|3&4&0&1376&0x0|4&4&0&1380&0x0|5&4&15&1380&0x0|6&4&0&1368&0x0|7&4&0&1372&0x0|8&4&62&1372&0x0', 1, 'Judger_Contest'),
(48, 3, '肖江', 2, 4, 15, 1360, 'C++', 296, '2019-03-19 22:25:05', '1&4&15&1360&0x0|2&4&0&1304&0x0|3&4&15&1304&0x0|4&4&0&1300&0x0|5&4&0&1304&0x0|6&4&0&1312&0x0|7&4&0&1304&0x0|8&4&15&1304&0x0|9&4&0&1316&0x0|10&4&0&1300&0x0', 1, 'Judger_Contest'),
(49, 3, '肖江', 3, 4, 1031, 31688, 'Java', 949, '2019-03-19 22:26:45', '1&4&156&22016&0x0|2&4&125&22088&0x0|3&4&203&22300&0x0|4&4&203&23748&0x0|5&4&250&23488&0x0|6&4&1031&31688&0x0', 1, 'Judger_Contest'),
(50, 3, '肖江', 4, 4, 265, 37532, 'Java', 468, '2019-03-19 22:46:12', '1&4&109&22016&0x0|2&4&125&22156&0x0|3&4&140&25644&0x0|4&4&265&37532&0x0|5&4&156&22032&0x0', 1, 'Judger_Contest'),
(55, 3, '吴泽', 2, 6, 2000, 22104, 'Java', 341, '2019-03-22 10:09:40', '1&8&140&22052&0x0|2&4&93&22020&0x0|3&8&93&21980&0x0|4&4&93&22104&0x0|5&6&2000&22032&0x103|6&6&1984&21816&0x103|7&6&1906&21988&0x103|8&6&1953&21796&0x103|9&6&1953&21940&0x103|10&6&1968&21796&0x103', 1, 'Judger_Contest'),
(56, 3, '吴泽', 2, 6, 2000, 22176, 'Java', 341, '2019-03-22 10:17:23', '1&8&109&22016&0x0|2&8&140&22056&0x0|3&8&109&22004&0x0|4&4&109&22176&0x0|5&6&2000&22020&0x103|6&6&2000&22024&0x103|7&6&1921&21820&0x103|8&6&1968&21996&0x103|9&6&1968&21836&0x103|10&6&1921&22016&0x103', 1, 'Judger_Contest'),
(57, 3, '肖江', 2, 11, -1, -1, 'Java', 550, '2019-03-22 10:19:27', '', 1, 'Judger_Contest'),
(58, 3, '肖江', 2, 4, 296, 22072, 'Java', 550, '2019-03-22 10:19:50', '1&4&234&22072&0x0|2&4&250&21972&0x0|3&4&296&21952&0x0|4&4&281&22016&0x0|5&4&265&22052&0x0|6&4&234&21988&0x0|7&4&250&21976&0x0|8&4&234&22048&0x0|9&4&187&21972&0x0|10&4&250&22064&0x0', 1, 'Judger_Contest');

-- --------------------------------------------------------

--
-- 表的结构 `oj_contest`
--

CREATE TABLE IF NOT EXISTS `oj_contest` (
  `ConID` int(11) NOT NULL COMMENT '比赛ID',
  `Title` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '比赛标题',
  `Synopsis` text COLLATE utf8_bin NOT NULL,
  `Organizer` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '举办人',
  `Rule` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '规则',
  `Type` int(11) NOT NULL,
  `PassWord` varchar(20) COLLATE utf8_bin NOT NULL,
  `StartTime` datetime NOT NULL COMMENT '开始时间',
  `OverTime` datetime NOT NULL COMMENT '结束时间',
  `EnrollStartTime` datetime NOT NULL COMMENT '报名开始时间',
  `EnrollOverTime` datetime NOT NULL COMMENT '报名结束时间',
  `EnrollPeople` text COLLATE utf8_bin NOT NULL COMMENT '参赛人员',
  `RiskRatio` float NOT NULL COMMENT '风险系数',
  `RatingStatus` int(11) NOT NULL COMMENT '战斗力结算状态',
  `Problem` text COLLATE utf8_bin NOT NULL COMMENT '题目',
  `Show` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_contest`
--

INSERT INTO `oj_contest` (`ConID`, `Title`, `Synopsis`, `Organizer`, `Rule`, `Type`, `PassWord`, `StartTime`, `OverTime`, `EnrollStartTime`, `EnrollOverTime`, `EnrollPeople`, `RiskRatio`, `RatingStatus`, `Problem`, `Show`) VALUES
(1, 'ACM测试赛', 'ACM测试赛', '肖江', 'ACM', 1, '116', '2019-02-01 00:00:00', '2019-02-02 00:00:00', '2019-02-01 00:00:00', '2019-02-02 00:00:00', '', 0, 0, '1000', 1),
(2, 'OI测试赛', 'OI测试赛', '肖江', 'OI', 1, '202', '2019-03-09 16:00:00', '2019-03-09 19:00:00', '2019-03-09 16:00:00', '2019-03-09 19:00:00', '肖江|吴泽', 0, 0, '1000|1001|1002|1003|1004|1005|1006|1007', 1),
(3, '春峰单挑赛', '全是水题', '肖江', 'ACM', 0, '', '2019-03-18 11:00:00', '2019-03-19 00:00:00', '2019-03-15 21:00:00', '2019-03-19 00:00:00', '吴泽的父亲|肖江|吴泽', 1, 0, '1012|1011|1015|1017|1018', 1),
(4, '这题..好像做过', '真的做过', '肖江', 'ACM', 1, '116', '2019-03-30 00:00:00', '2019-03-31 00:00:00', '2019-03-30 00:00:00', '2019-03-31 00:00:00', '', 1, 0, '1016|1019|1005|1007|1022', 1);

-- --------------------------------------------------------

--
-- 表的结构 `oj_data`
--

CREATE TABLE IF NOT EXISTS `oj_data` (
  `oj_name` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '网站名称',
  `oj_html_title` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '标题',
  `oj_title` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '副名称',
  `oj_runid` int(11) NOT NULL,
  `oj_EvaMacState_1` int(11) NOT NULL,
  `oj_EvaMacState_2` int(11) NOT NULL,
  `oj_allrun_1` int(11) NOT NULL,
  `oj_allrun_2` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_data`
--

INSERT INTO `oj_data` (`oj_name`, `oj_html_title`, `oj_title`, `oj_runid`, `oj_EvaMacState_1`, `oj_EvaMacState_2`, `oj_allrun_1`, `oj_allrun_2`) VALUES
('OnlineJudge', 'OnlineJudge - 评测平台', 'Online Judge - 源程序判题系统', 121, 0, 0, 1955, 221);

-- --------------------------------------------------------

--
-- 表的结构 `oj_problem`
--

CREATE TABLE IF NOT EXISTS `oj_problem` (
  `Name` varchar(20) COLLATE utf8_bin NOT NULL,
  `proNum` int(11) NOT NULL,
  `LimitTime` int(11) NOT NULL,
  `LimitMemory` int(11) NOT NULL,
  `Description` text COLLATE utf8_bin NOT NULL,
  `InputFormat` text COLLATE utf8_bin NOT NULL,
  `OutputFormat` text COLLATE utf8_bin NOT NULL,
  `EmpInput` text COLLATE utf8_bin NOT NULL,
  `EmpOutput` text COLLATE utf8_bin NOT NULL,
  `Hint` text COLLATE utf8_bin NOT NULL,
  `Source` text COLLATE utf8_bin NOT NULL,
  `CreateTime` date NOT NULL,
  `Test` varchar(100) COLLATE utf8_bin NOT NULL,
  `Show` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_problem`
--

INSERT INTO `oj_problem` (`Name`, `proNum`, `LimitTime`, `LimitMemory`, `Description`, `InputFormat`, `OutputFormat`, `EmpInput`, `EmpOutput`, `Hint`, `Source`, `CreateTime`, `Test`, `Show`) VALUES
('A+B Problem', 1000, 1000, 65536, 'Calculate a+b', 'Two integer a and b', 'value of a+b', '1 2', '3', 'C<br />\r\n<pre><code class="C">#include &lt;stdio.h&gt;\r\nint main(void)\r\n{\r\n    int a,b;\r\n    scanf("%d%d",&amp;a,&amp;b);\r\n    printf("%d",a+b);\r\n    return 0;\r\n}\r\n</code></pre><br />\r\nC++<br />\r\n<pre><code class="C++">#include &lt;iostream&gt;\r\nusing namespace std;\r\nint main()\r\n{\r\n    int a,b;\r\n    cin&gt;&gt;a&gt;&gt;b;\r\n    cout&lt;&lt;a+b&lt;&lt;endl;\r\n    return 0;\r\n}\r\n</code></pre><br />\r\nJava<br />\r\n<pre><code class="Java">import java.util.*;\r\nimport java.io.*;\r\npublic class Main\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner reader=new Scanner(System.in);\r\n        int a,b;\r\n        a=reader.nextInt();\r\n        b=reader.nextInt();\r\n        System.out.println(a+b);\r\n    }\r\n}\r\n</code></pre><br />\r\nPython3.6<br />\r\n<pre><code class="Python">import sys\r\nfor line in sys.stdin:\r\n a = line.split() \r\nprint (int(a[0]) + int (a[1]))\r\n</code></pre>', '', '2019-02-01', '1&2&3&4&5&6&7&8&9&10', 1),
('Hello, World!', 1001, 1000, 65536, '输出内容：Hello, World!', '无输入', '输出"Hello, World!"', '无', 'Hello, World!', '注意空格和符号（中/英）', 'XiaoJiang', '2019-02-10', '1', 1),
('被3整除', 1002, 1000, 65536, '在数学领域中，3是一个很奇特的数字。<br/>\r\n现在，给出一个很大的数字，判断其能否被3整除。<br/>\r\n如果这个数字能被3整除，请输出“YES”，否则输出“NO”。', '第一行为一个正整数n，表示数据的组数。<br/>\n接下来的n行，每行有一个正整数。<br/>\n​0 < n < 100;<br/>', 'YES 或 NO', '1\r\n3', 'YES', '数字的位数小于100位。<br/>\r\n输出时请注意大小写，不要输出引号！\r\n', '', '2019-02-11', '1', 1),
('分糖果', 1003, 1000, 65536, '万圣节终于到了，WYM在这一天收到了好多到多的糖，但是他自己一个人根本吃不完。他就想把这些糖分给他的朋友。他每次可分给别人任意块的糖果，但是他的朋友都很任性，每个人都不想得到跟上一个人一样数量的糖果。那么现在最多能分给多少人呢？', '一个正整数n (1  ≤  n  ≤ 10<sup>9</sup>) 表示糖果的数量。', '输出一个整数，表示分到糖果的人数。', '1', '1', '对于样例的解释：\r\n一块糖，一个人。（这不废话么！）', '', '2019-02-11', '1&2&3&4&5', 1),
('倒置域名', 1004, 1000, 65536, '域名通常由多个个片段以点隔开构成, 比如<br/>www.youtube.com<br/>tieba.baidu.com<br/>www.google.com.hk<br/>acm.hust.edu.cn<br/>segmentfault.com<br/>请你写个程序将域名个各个段倒置, 上述域名通过你的程序后应该输出:<br/>com.youtube.www<br/>com.baidu.tieba<br/>hk.com.google.www<br/>cn.edu.hust.acm<br/>com.segmentfault', '输入一个字符串域名, 不含空格,长度小于100', '输出倒置后的域名', 'acm.hust.edu.cn', 'cn.edu.hust.acm', '', 'xanarry', '2019-02-11', '1&2&3&4&5&6&7&8&9&10&11', 1),
('香蕉', 1005, 1000, 65536, '为了给唐僧找吃的，猴子来到了一片竹林。他看这里的竹子长得如此茂密，心想，这的竹子长得这么好，竹林里一定有很多半生不熟带梅花点的香蕉？？？<br/>于是他来到竹林里面砍香蕉！<br/>猴子费了好大劲采了a根香蕉堆成一堆（这不是拿汗毛变得吧？），这堆香蕉离唐僧b米,猴子打算把香蕉带回去给唐僧吃。<br/>已知猴子每次最多能背c根，但是，众所周知，猴子嘴馋，如果身上有香蕉，每走一米要吃一根香蕉。那么聪明的你，知道猴子最多能背多少根香蕉给唐僧么？<br/>P.S.：<br/>他可以随时把香蕉扔到地上。也可以往回走。<br/>猴子要么不走，要么走1米。', '输入一行数字，为3个正整数a，b，c。<br/>其中：a为香蕉总数，b为猴子到唐僧的直线距离，c为猴子每次携带香蕉的上限。<br/>1 &lt;= a，b，c&lt;= 100，000', '输出一个整数。为猴子能给唐僧带回去多少香蕉。', '100 50 50', '25', '对于样例的解释：<br/>100根香蕉距离唐僧50米，猴子一次最多带50根。<br/>第一次，猴子从50米处带50根香蕉到25米处，并放下（走了25米，消耗了25根香蕉）。此时：25米处有25根，50米处有50根。<br/>第二次，猴子再从50米处带50根香蕉，到25米处。此时，25米处有50根香蕉。<br/>第三次，猴子带所有香蕉回去，就剩下25根了。<br/>                           ——来自硕硕的误导提示', '硕硕', '2019-02-11', '1&2&3&4&5&6&7&8&9&10', 1),
('Web浏览', 1006, 1000, 66536, '实现浏览器的页面前后访问机制。有四种命令：<br/>1、BACK；<br/>2、FORWARD；<br/>3、VISIT：访问新的页面；<br/>4、QUIT：退出浏览器。<br/>请参考实际的浏览器按钮的功能。<br/>假设浏览器打开时，显示的页面是：http://www.acm.org/', '一系列命令：以BACK、FORWARD、VISIT或QUIT开头。<br/>如果是VISIT，后面要跟URL，长度不超过70，且不含空格。最后总是以QUIT结尾。', '对于每一个命令（除了QUIT），输出浏览页面的URL，如果命令被忽略，输出：Ignored。', 'VISIT http://acm.ashland.edu/<br/>VISIT http://asm.baylor.edu/acmipc/<br/>BACK<br/>BACK<br/>BACK<br/>FORWARD<br/>VISIT http://www.ibm.com/<br/>BACK<br/>BACK<br/>FORWARD<br/>FORWARD<br/>FORWARD<br/>QUIT', 'http://acm.ashland.edu/<br/>http://asm.baylor.edu/acmipc/<br/>http://acm.ashland.edu/<br/>http://www.acm.org/<br/>Ignored<br/>http://acm.ashland.edu/<br/>http://www.ibm.com/<br/>http://acm.ashland.edu/<br/>http://www.acm.org/<br/>http://acm.ashland.edu/<br/>http://www.ibm.com/<br/>Ignored', '最多操作100000次', '', '2019-02-12', '1&2&6&7&8', 1),
('天下第一武道大会', 1007, 1000, 65536, '为了评出谁是天下第一武术高手，天下第一武道大会每五年一次。<br/>\r\n本届武道大会共有n名参赛选手。n名选手抽签之后，编号分别是1~n。众所周知，武道大会是采取的是淘汰制，所有人会根据编号的顺序，两两一组PK，战斗一旦失败就会被淘汰，如果轮空，则直接晋级。每轮比赛都会淘汰掉接近一半的选手。<br/>\r\n举个例子，总共有7名选手，则第一轮一定是1号和2号PK，3号和4号PK，5号和6号PK，7号轮空直接晋级。<br/>\r\n第一轮过后只会剩下4人，假设剩下的人分别是1号，4号，5号和7号。那么这些人会按照编号继续进行第二轮。<br/>\r\n则第二轮一定是 1号4号PK，5号7号PK。<br/>\r\n这样直到剩下1人为冠军。<br/>\r\n如果你看好的两人编号分别是a和b，在这两人不被淘汰的情况下，他们会在第几轮相遇？', '三个正整数n,a,b。分别代表总人数，和你看好两人的编号。<br/>\r\n2 < n <= 1024<br/>\r\n1 <= a,b <= n', '一个正整数，代表这两人相遇的轮数。', '8 7 5', '2', '对于样例的解释：<br/>\r\n第一轮{1,2} {3,4} {5,6} {7,8}<br/>\r\n第二轮{1或2, 3或4} {5,7}<br/>\r\n所以输出2', '硕硕', '2019-02-15', '1&2&3&4&5&6&7&8&9&10&11&12&13&14&15&16&17&18&19&20', 1),
('到底谁才是真正的复读机？', 1013, 1000, 65536, '群里一共有m个人，他们的编号是1-m，群中有一些人只会点击上面的+1（第一个人发出一条消息后就会有+1），这些人被称作为复读机。<br/>SGQ 发现，如果某一个人是一个复读机，那么他每次发的消息一定跟群里的上一条消息一样，注意：第一个发消息的人一定不是复读机。<br/>现在SGQ 搞到了一份有ｎ条消息的聊天记录，你能告诉他群里最多有多少人是复读机吗？', '第一行两个正整数 m,n，表示群里的人数和聊天记录的总条数<br/>接下来ｎ行按时间顺序给出聊天记录，每行有一个正整数ｋ和一个小写字母字符串ｓ，表示群友ｋ发了消息ｓ<br/>1≤m,n≤10^3<br/>1≤∣s∣≤100', '输出一行，将所有可能是复读机的群友的编号按照从小到大排序后输出，每两个编号之间隔一个空格<br/>当没有人是复读机时输出-1。', '3 ３<br/>1 hiahiha<br/>2 hiahiha<br/>1 xiaxia', '2 3', '', 'M̶r̶.̶S̶', '2019-02-16', '1&2&3&4&5&6&7&8&9&10', 1),
('ACM罚时', 1008, 1000, 65536, '作为一个ACMer，总是习惯于在比赛中或比赛结束后查看自己的排名（Standing），有细心的同学发现Penalty（罚时），在相同做题数下Penalty越小越好（真是个令人振奋的发现）。让我们看看Penatly的计算方法：<br/>每道试题用时将从竞赛开始到试题解答被判定为正确（AC）为止，其间每一次提交运行结果被判错误的话将被加罚20分钟时间，未正确解答的试题不记时。<br/>例如：A、B两队都正确完成两道题目，其中A队提交这两题的时间分别是比赛开始后1:00和2:45，B队为1:20和2:00，但B队有一题提交了2次。这样A队的Penalty为1:00+2:45=3:45而B队为1:20+2:00+0:20=3:40，所以B队因Penalty少而获胜。当然如果你AC了某道题后，之后这一题所有提交的代码都不算罚时和时间。<br/>恰逢周一晚的周赛，在机房18:00-22:00，考验随之而来——现在需要你计算大家的Penalty，Penalty初始为00:00，相信你一定可以的！', '输入包含多组数据，每组数据的第一行包含一个正整数N（1=&lt;N&lt;=20）表示此ACMer的提交次数，<br/>接下来的第2到N+1行表示每次提交的状态，由三个字段组成，<br/>第一个字段为一个整数A，表示当前的时间：hour:minutes（保证18=&lt;hour&lt;=22,0&lt;=minutes&lt;=60），<br/>第二个字段为一个大写字母（A~Z），表示题号，<br/>第三个字段表示OJ返回的状态，假设只可能是AC，WA，RE，TLE中的一种，均为大写。', '输出这位ACMer的Penalty，每个测试数据占一行', '3<br/>18:05 A RE<br/>19:11 A AC<br/>20:00 B WA<br/>1<br/>20:27 F AC', '01:31<br/>02:27', '', '', '2019-02-15', '1&2', 1),
('金坷垃祭', 1009, 1000, 65536, '又到了一年一度的金坷垃祭<br/>今年威廉伯爵打算在最显眼的地方拉出写着"JINKELA"的条幅<br/>于是就派人去制作这个条幅<br/>不幸的是,由于打印机故障,最终打印出来的条幅上写的并不是"JINKELA",而是一些随机的大写字母<br/>而且已经没有时间了,必须马上把条幅拉出去<br/>于是威廉伯爵打算通过涂抹掉一些字符,使得最后剩下的字符是"JINKELA"', '输入包含多组数据.每组数据占一行,包含一个字符串s,表示打印出来的条幅上的文字<br/>1&lt;=len(s)&lt;=200', '对于每组数据,如果威廉伯爵可以成功得到"JINKELA",输出"YES",否则输出"NO"', 'ABCDEFG<br/>JINKELA', 'NO<br/>YES', '', 'Erona', '2019-02-15', '1&2&3&4&5', 1),
('选数', 1010, 1000, 65536, '有一长串数字，长度为n，仅由1.2.3.4.5.6.7.8.9九种数字组成，要求从这n个数字中挑出m个按照原先的顺序排列，使得新数字最大', '输入包括两行<br/>第一行包括n，m<br/>第二行表示一串数字', '输出最大的数字', '5 3<br/>12345', '345', '0 &lt; m &lt; = n &lt; 100', '假装有个来源', '2019-02-15', '1&2&3&4&5&6&7&8&9&10', 1),
('鸡蛋位置', 1011, 1000, 65536, '现有n个鸡蛋，一开始每个鸡蛋放置分别在1~n的位置上，并且每一个鸡蛋的大小ai都不一样，为了方便管理，农村主决定想把这些鸡蛋按大小从小到大排序，排序有可能改变之前鸡蛋放置的位置，所以农村主想知道有多少个鸡蛋的位置发生了改变', '第一行输入1个正整数n（其中 1&lt;=n&lt;=10000）<br/>第二行输入n个正整数ai,代表一开始第i个位置的鸡蛋上的大小( 1&lt;=ai&lt;=100000)', '输出有多少个鸡蛋的位置发生了改变', '4 <br/>2 3 5 1', '4', '排序后1~n的位置放置的是 1 2 3 5<br/>排序前1~n的位置放置的是 2 3 5 1<br/>4个鸡蛋的位置都改变了', '', '2019-02-15', '1&2&3&4&5&6&7&8', 1),
('图像模糊处理', 1012, 1000, 65536, '给定n行m列灰度图像的灰度值，要求用一下方法对其进行灰度处理：<br/>1、图像最外侧的点，灰度值不变。<br/>2、其余各个像素点的新灰度值，为本身的灰度值与上下左右相邻的4个像素点灰度值的平均值。<br/>请输出模糊处理后，各个点的灰度值。', '第一行两个正整数n和m,代表像素点的行数和列数。（1 &lt; n,m &lt; 100）<br/>接下来的n行，每行m个正整数，表示图像的灰度值。灰度值为0~255之间的数字（包含两端）。', '输出共n行，每行m个数字。<br/>每个数字保留到小数点后两位。<br/>表示模糊处理后的图像灰度值。', '3 3<br/>1 2 3<br/>4 5 6<br/>7 8 9', '1.00 2.00 3.00<br/>4.00 5.00 6.00<br/>7.00 8.00 9.00', '', '', '2019-02-15', '1&2&3&4&5', 1),
('MSH的难题', 1014, 1500, 65536, '今天MSH遇到一个非常难的问题：15+195+1995+……+19……5=？？<br/>MSH非常想知道这个问题的答案。<br/>这里有n个数，MSH想知道这n个数的和。<br/>聪明的你能帮MSH算出这个答案吗？', '输入仅包括一个整数ｎ，代表数字的个数<br/>0≤n≤444444', '仅包括一个整数，代表ｎ个数的和', '3', '2205', '15+195+1995=2205', 'M̶r̶.̶S̶', '2019-02-16', '1&2&3&4&5', 1),
('约数的个数', 1015, 1000, 65536, '计算一个整数的约数个数', '输入一个整数 n', '输出共一行，表示n的约数个数', '10', '4', '数据范围： 1&lt;=n&lt;2^31<br/>提示：1.在本机测试极限数据是否可以在规定的时限内出解<br/>2.掌握估计简单程序的时间复杂度<br/>3.建议使用函数来编写', '', '2019-02-16', '1&2&3&4&5&6&7&8&9&10', 1),
('输出质数', 1017, 1500, 65536, '输出n以内所有的质数，每行最多5个数', '一个正整数n， n &lt;= 70000', '每行最多5个数，一行中每个数字之间用空格隔开', '100', '2 3 5 7 11 <br/>13 17 19 23 29 <br/>31 37 41 43 47 <br/>53 59 61 67 71 <br/>73 79 83 89 97 ', '', 'XiaoJiang', '2019-03-14', '1&2&3&4&5&6', 1),
('约数的个数2 ', 1016, 1000, 65536, '聪敏的小Z在做完这单元前几个题目后，想用程序得到1-N中有三个约数的数的个数，你能帮助他吗？', '输入一个整数 n', '输出1到n中，有多少个数仅含有3个约数', '10', '2', '数据范围： <br/>对于30%的数据 n&lt;=1000 <br/>对于60%的数据 n&lt;=10^7 <br/>对于100%的数据 1&lt;=n&lt;=2^31-1<br/>提示：1.请尽可能的用最优解法<br/>2.不同的算法复杂度将会得到不同的分数(OI赛)<br/>3.请阅读数据范围判断你的程序的得分', '', '2019-02-16', '1&2&3&4&5&6&7&8&9&10', 1),
('数字金字塔', 1022, 1000, 65536, '输入一个数，要求输出对应的数字金字塔', '一个整数n (1&lt;=n&lt;=9)', '金字塔图形', '3', '  1<br/> 121<br/>12321', '', 'XiaoJiang', '2019-03-25', '1&2&3&4&5&6&7&8&9&10', 1),
('找最值', 1018, 1000, 65536, '输入n个数，请你找出其中最大的数字和最小的数字', '第一行一个数n，代表数字的个数， 1&lt;=n&lt;=10000 接下来的一行共n个数，每个数的范围 -1000&lt;=i&lt;=555555555', '最大数i 和最小数j', '5 1 2 3 4 5', '5 1', '', 'XiaoJiang', '2019-03-14', '1&2&3&4&5', 1),
('校门外的树', 1019, 1000, 65536, '某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。<br/>我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。<br/>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。 <br/>已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。<br/>现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。', '输入的第一行有两个整数：L（1 &lt;= L &lt;= 10000）和 M（1 &lt;= M &lt;= 100）<br/>L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。<br/>接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。', '输出包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。', '500 3<br/>150 300<br/>100 200<br/>470 471', '298', '', 'NOIP2005普及组第二题', '2019-03-21', '1&2&3&4&5&6&7&8&9&10', 1),
('大年初一', 1020, 1000, 65536, '有三个好朋友住在同一条街上，第一个人住在x1的位置，第二个人住在x2的位置，第三个人住在x3的位置。他们计划在大年初一那一天一起聚会，所以他们当然要选择一个聚集的地点啊。他们总共走的路程的最小值是多少？', '输入只有三个整数x1,x2,x3。(1 ≤ x1, x2, x3 ≤ 10<sup>9</sup>)', '输出一个整数，为他们所走总路程的最小值。', '7 1 4', '6', '', '', '2019-03-21', '1&2&3&4&5&6&7&8&9&10', 1),
('完美序列', 1021, 1000, 65536, '我们定义一个函数S(n)，表示十进制数字n的位数。<br/>比如：S(123)，因为123是三位数，所以S(123)=3;<br/>再如：S(111222)，因为111222是六位数，所以S(111222)=6。<br/><br/>我们再定义完美序列：为递增的自然数序列。<br/>如：17,20,33。这是一个长度为3的完美序列。<br/>但是：18,18,20。就不是一个完美序列，因为第二个18并不大于第一个18。<br/><br/>WYM想获得一个从m开始的完美序列。现在WYM手中没有任何数字，他每获得一个数字n，需要花费的代价为S(n)*k。<br/>如果WYM可以承受的最大代价为w，那么序列中最多有多少个元素呢？', '三个正整数。<br/>w,m,k。<br/>1 &lt;= w,m &lt;= 10<sup>16</sup><br/>1 &lt;= k &lt;= 10<sup>9</sup>', '一个正整数，表示序列的长度。', '2 8 1', '2', '最大代价为2，第一个数字为8，k为1。<br/>2个数字分别为8,9', 'CF', '2019-03-21', '1&2&3&4&5&6&7&8&9&10&11&12&13&14&15&16&17&18&19&20&21&22&23&24&25&26&27&28&29&30&31&32&33&34&35', 1),
('最屌的人', 1023, 1000, 65536, '谁是1#116寝室最屌的人？', '无', '姓名', '', '吴泽', '样例是错的<br/>python注意输出编码格式为UTF-8 without BOM', 'Setiuo', '2019-03-28', '1', 1),
('谁是父亲', 1024, 1000, 65536, '1#116寝室每个人都有一个父亲，你知道他们每个人对应的父亲是谁吗？', '儿子姓名', '父亲姓名', '吴泽', '肖江', '样例是对的<br/>python注意输出编码格式为UTF-8 without BOM', 'Setiuo', '2019-03-29', '1&2&3&4&5', 1),
('数字金字塔2', 1025, 1000, 65536, '输入一个数，要求输出对应的数字金字塔', '一个整数n (1&lt;=n&lt;=9)', '金字塔图形', '3', '        1<br/>    1   2   1<br/>1   2   4   2   1', '说明：需要考虑每个数字之前打印的空格数，这取决于打印数字的位数：<br/>           当这个数是一位数，则打印3个空格,<br/>           当这个数是两位数，则打印2个空格，<br/>           当这个数是三位数，则打印1个空格。', '', '2019-04-01', '1&2&3&4&5&6&7&8&9&10', 1),
('四则运算基础二', 1026, 1000, 65536, '完成不包括括号的加减乘除四则运算长算式。', '输入为一行不包括括号的加减乘除四则运算长算式。"="代表输入结束。<br/>每个数均在int范围内', '如果能够进行运算则输出运算结果。<br/>如果出现除零的情况（除法的除数为零）则输出："No 0"<br/>如果运算符不是加减乘除符号，则输出："Error"', '1+5-7/6*3-2+19=', '20', '无', 'OpenJudge', '2019-04-05', '1&2&3&4&5&6&7&8&9&10&11&12&13&14&15', 1),
('密码翻译', 1027, 1000, 65536, '在情报传递过程中，为了防止情报被截获，往往需要对情报用一定的方式加密，简单的加密算法虽然不足以完全避免情报被破译，但仍然能防止情报被轻易的识别。我们给出一种最简的的加密方法，对给定的一个字符串，把其中从a-y，A-Y的字母用其后继字母替代，把z和Z用a和A替代，其他非字母字符不变，则可得到一个简单的加密字符串。', '输入一行，包含一个字符串，长度小于80个字符。', '输出每行字符串的加密字符串。', 'Hello! How are you!', 'Ifmmp! Ipx bsf zpv!', '10%只含有小写字母；<br/>30%只包含小写字母和大写字母；<br/>60%只包含大写小写字母数字和空格；<br/>100%只含有大写小写字母数字和特殊字符和空格。', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('加密的病历单', 1028, 1000, 65536, '小英是药学专业大三的学生，暑假期间获得了去医院药房实习的机会。<br/><br/> 在药房实习期间，小英扎实的专业基础获得了医生的一致好评，得知小英在计算概论中取得过好成绩后，主任又额外交给她一项任务，解密抗战时期被加密过的一些伤员的名单。<br/><br/>   经过研究，小英发现了如下加密规律(括号中是一个“原文 -&gt; 密文”的例子)<br/><br/>   1.原文中所有的字符都在字母表中被循环左移了三个位置（dec  -&gt; abz）<br/><br/>   2.逆序存储（abcd -&gt; dcba ）<br/><br/>   3.大小写反转（abXY -&gt; ABxy）', '一个加密的字符串。(长度小于50且只包含大小写字母)', '输出解密后的字符串。', 'GSOOWFASOq', 'Trvdizrrvj', '30%只包含大写或者小写字母；<br/>100%包含大写和小写字母；', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('整理药名', 1029, 1000, 65536, '医生在书写药品名的时候经常不注意大小写，格式比较混乱。现要求你写一个程序将医生书写混乱的药品名整理成统一规范的格式，即药品名的第一个字符如果是字母要大写，其他字母小写。如将ASPIRIN、aspirin整理成Aspirin。', '第一行一个数字n，表示有n个药品名要整理，n不超过100。<br/><br/>接下来n行，每行一个单词，长度不超过30，表示医生手书的药品名。药品名由字母、数字和-组成。', 'n行，每行一个单词，对应输入的药品名的规范写法。', '4<br/>AspiRin<br/>cisapride<br/>2-PENICILLIN<br/>Cefradine-6', 'Aspirin<br/>Cisapride<br/>2-penicillin<br/>Cefradine-6', '20%只含有字母；<br/>50%只含有字母和数字；<br/>100%含有数字字母和-；', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('验证子串', 1030, 1000, 65536, '输入两个字符串，验证其中一个串是否为另一个串的子串。', '输入两个字符串， 每个字符串占一行，长度不超过200且不含空格。', '若第一个串s1是第二个串s2的子串，则输出(s1) is substring of (s2)<br/><br/>否则，若第二个串s2是第一个串s1的子串，输出(s2) is substring of (s1)<br/><br/>否则，输出 No substring。', 'abc<br/>dddncabca', 'abc is substring of dddncabca', '有10%的可能性：s1不是s2的子串，s2也不是s1的子串；<br/>有40%的可能性：s2是s1的子串；<br/>有50%的可能性：s1是s2的子串。', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('删除单词后缀', 1031, 1000, 65536, '给定一个单词，如果该单词以er、ly或者ing后缀结尾， 则删除该后缀（题目保证删除后缀后的单词长度不为0）， 否则不进行任何操作。', '输入一行，包含一个单词（单词中间没有空格，每个单词最大长度为32）。', '输出按照题目要求处理后的单词。', 'referer', 'refer', '有30%的可能：不包含后缀；<br/>有70%的可能：包含后缀。', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('单词的长度', 1032, 1000, 65536, '输入一行单词序列，相邻单词之间由1个或多个空格间隔，请对应地计算各个单词的长度。<br/>注意:如果有标点符号(如连字符，逗号)，标点符号算作与之相连的词的一部分。没有被空格间开的符号串，都算作单词。', '一行单词序列，最少1个单词，最多300个单词，单词之间用至少1个空格间隔。单词序列总长度不超过1000。', '依次输出对应单词的长度，之间以逗号间隔。', 'She was born in 1990-01-02  and  from Beijing city.', '3,3,4,2,10,3,4,7,5', '10%只包含字母；<br/>30%只包含字母和数字；<br/>100%包括数字、字母、特殊字符.', '', '2019-04-05', '1&2&3&4&5&6&7&8&9&10', 1),
('黑默丁格的炮台', 1033, 1000, 65536, '兰博和提莫正在讨论约德尔人的故事,谈起约德尔人,自然少不了一个人,那就是黑默丁格------约德尔人历史上最伟大的科学家. 提莫说,黑默丁格最近在思考一个问题:黑默丁格有三个炮台,每个炮台都能攻击到距离它R以内的敌人(在边界上也能攻击到),如果一个炮台能攻击到敌人,那么就会对敌人造成1倍的伤害.黑默丁格将三个炮台放在N*M方格中的点上,并且给出敌人坐标. 问:那敌人受到伤害会是几倍?<br/>(两点之间的距离为两点连续的距离,例如(3,0),(0,4)之间的距离是5)', '多组输入,对于每组输入<br/>第一行9个整数,R,x1,y1,x2,y2,x3,y3,x0,y0.<br/>R代表炮台攻击的最大距离,(x1,y1),(x2,y2),(x3,y3)代表三个炮台的坐标.<br/>(x0,y0)代表敌人的坐标<br/>100%的输入数据 所有整数均不大于100', '对于每组输入<br/>输出一行,这一行代表敌人承受的最大伤害倍,(如果所有炮台都不能攻击到敌人,输出0)', '1 1 1 2 2 3 3 1 2', '2', '', '', '2019-04-06', '1', 1),
('无尽的迷茫', 1034, 1000, 65536, '对于给定的两个数,求它们的最小公倍数。', '一行,两个数。均小于100大于0', '一行,它们的最小公倍数。', '2 3', '6', '', '', '2019-04-12', '1&2&3&4&5', 1),
('最大公约数', 1035, 1000, 65536, '求两个数的最大公约数', '输入共若干行，每行两个整数 a,b', '输出共若干行，每一行输出读入对应两个数的最大公约数', '6 9<br/>4 8', '3<br/>4', '数据范围： 1&lt;=a,b&lt;=10^8<br/>提示：1.尝试使用函数递归的方式求解<br/>2.本题多组数据，需要使用循环读入教学：本题并没有指明数据组数，你的程序需要判断EOF（end of file）<br/>C的示例 while (scanf("%d%d",&a,&b)!=EOF);<br/>C++的示例 while (cin&gt;&gt;a&gt;&gt;b);<br/>Pascal的示例 while not seekeof do read(a,b);<br/>Pascal不建议使用eof，使用seekeof可以忽略空格、回车和不可见字符，更加保险', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('判断三角形', 1036, 1000, 65536, '请问长度分别为a、b、c的三条边能否构成一个三角形？', '输入三个用空格隔开的整数a、b、c', '如果能构成三角形，输出Yes，否则输出No', '1 2 2', 'Yes', '数据范围： 1&lt;=a,b,c&lt;=2147483647<br/>提示：1.三角形两边之和大于第三边、两边之差小于第三边。<br/>2.继续练习使用if语句和逻辑关系运算符。<br/>3.带符号32位整数(C/C++)int、(Pascal)longint能够表示的最大整数为2147483647，请使用无符号32位整数unsigned int、dword，或者64位整数long long、int64完成本题。<br/>4.C/C++输入输出unsigned int应使用%u，在Tyvj上输入输出long long应使用%I64d。', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('A*B Problem', 1037, 1000, 65536, '输入两个自然数，输出他们相乘后数的位数', '输入两个自然数 a,b', '输出共一行，输出他们相乘后的位数', '123 500', '5', '数据范围： 1&lt;=a,b&lt;=2^64<br/>提示：1.尝试使用数学函数<br/>2.本题有很多做法，但这里建议您使用“log”,因为它最简单', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('四则运算', 1038, 1000, 65536, '输入两个自然数，输出他们四则运算后的结果', '输入两个自然数 a,b (1&lt;=a,b&lt;=100000)', '输出共四行， 第一行输出a+b后的结果， 第二行输出a-b后的结果， 第三行输出a*b后的结果， 第四行输出a/b（除）后的结果， 舍小数保留到整数位', '123 500', '623 -377 61500 0', '1.掌握整数、浮点数数据类型<br />\r\n2.了解你使用数据类型存储数值的范围<br />\r\n3.掌握保留位数的相关语法（方法）<br />\r\n4.仔细阅读题目 5.整型运算无需使用double', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('A+B Problem 2', 1039, 1000, 65536, '输入两个自然数，输出他们的和', '输入两个自然数 a,b', '一个数，即a和b的和', '123 500', '623', '数据范围： 1&lt;=a,b&lt;=10^2222<br/>提示：1.学习字符串的读入<br/>2.掌握简单高精度计算方法', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('矩阵旋转', 1040, 1000, 65536, '给定一个n*n的矩阵，输出他们顺时针旋转90度后的结果', '第一行一个整数n接下来n行，每行m列，表示上文所说的矩阵', '共n行，每行n个数，表示旋转后的矩阵', '3<br/>1 2 3<br/>4 5 6<br/>7 8 9', '7 4 1<br/>8 5 2<br/>9 6 3', '对于100%的数据 n&lt;=100<br/>提示：1.找到旋转前和旋转后位置的关系', '', '2019-04-12', '1&2&3&4&5&6&7&8&9&10', 1),
('连续的字符', 1041, 1000, 65536, '给一个字符串，你需要判断里面0和1出现的次数连续出现的次数是否大于等于7 是输出Yes，否则输出No', '一个只包括0和1的字符串', 'Yes或No', '10001', 'No', '', '', '2019-04-15', '1&2&3&4&5', 1),
('[NOIP2002P4]马拦过河卒', 1042, 1000, 65536, '棋盘上A点有一个过河卒，需要走到目标B点。<br />\r\n卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为&ldquo;马拦过河卒&rdquo;。<br />\r\n棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过20的整数)，同样马的位置坐标是需要给出的。<br />\r\n现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。', '一行四个数据，分别表示B点坐标和马的坐标。', '一个数据，表示所有的路径条数。', '6 6 3 3', '6', '', 'noip2002普及组第4题', '2019-04-16', '1&2&3&4&5&6&7&8&9&10', 1);

-- --------------------------------------------------------

--
-- 表的结构 `oj_status`
--

CREATE TABLE IF NOT EXISTS `oj_status` (
  `RunID` int(11) NOT NULL COMMENT '运行ID',
  `User` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '用户',
  `Problem` int(11) NOT NULL COMMENT '问题编号',
  `Status` int(11) NOT NULL COMMENT '状态',
  `UseTime` int(11) NOT NULL COMMENT '耗时',
  `UseMemory` int(11) NOT NULL,
  `Language` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '语言',
  `CodeLen` int(11) NOT NULL COMMENT '代码长度',
  `SubTime` datetime NOT NULL COMMENT '提交时间',
  `AllStatus` varchar(1000) COLLATE utf8_bin NOT NULL COMMENT '测试点状态',
  `Show` int(11) NOT NULL,
  `Judger` varchar(20) COLLATE utf8_bin NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_status`
--

INSERT INTO `oj_status` (`RunID`, `User`, `Problem`, `Status`, `UseTime`, `UseMemory`, `Language`, `CodeLen`, `SubTime`, `AllStatus`, `Show`, `Judger`) VALUES
(1, '肖江', 1000, 4, 15, 1312, 'C++', 118, '2019-02-17 15:08:36', '1&4&0&1308&0x0|2&4&0&1304&0x0|3&4&0&1304&0x0|4&4&15&1308&0x0|5&4&0&1304&0x0|6&4&0&1304&0x0|7&4&0&1308&0x0|8&4&0&1304&0x0|9&4&15&1312&0x0|10&4&15&1304&0x0', 1, 'Judge'),
(2, '肖江', 1001, 4, 0, 1400, 'C++', 106, '2019-02-17 15:09:29', '1&4&0&1400&0x0', 1, 'Judger'),
(3, '肖江', 1002, 4, 0, 1352, 'C++', 376, '2019-02-17 15:10:07', '1&4&0&1352&0x0', 1, 'Judger'),
(4, '肖江', 1003, 4, 15, 1356, 'C++', 430, '2019-02-17 15:10:40', '1&4&15&1356&0x0|2&4&0&1304&0x0|3&4&15&1308&0x0|4&4&15&1304&0x0|5&4&0&1304&0x0', 1, 'Judger'),
(5, '肖江', 1004, 4, 31, 1400, 'C++', 338, '2019-02-17 15:11:11', '1&4&15&1400&0x0|2&4&0&1352&0x0|3&4&31&1356&0x0|4&4&15&1348&0x0|5&4&0&1348&0x0|6&4&0&1348&0x0|7&4&0&1356&0x0|8&4&0&1348&0x0|9&4&0&1344&0x0|10&4&0&1356&0x0|11&4&0&1356&0x0', 1, 'Judger'),
(6, '肖江', 1005, 4, 15, 1404, 'C++', 418, '2019-02-17 15:11:40', '1&4&0&1404&0x0|2&4&0&1356&0x0|3&4&15&1356&0x0|4&4&0&1360&0x0|5&4&0&1352&0x0|6&4&0&1348&0x0|7&4&15&1356&0x0|8&4&0&1352&0x0|9&4&0&1356&0x0|10&4&0&1356&0x0', 1, 'Judger'),
(7, '肖江', 1006, 8, 609, 7372, 'C++', 1170, '2019-02-17 15:12:11', '1&4&0&1400&0x0|2&4&0&1344&0x0|6&8&562&7372&0x0|7&8&609&6796&0x0|8&4&578&7216&0x0', 1, 'Judger'),
(8, '肖江', 1007, 4, 15, 1360, 'C++', 248, '2019-02-17 15:12:45', '1&4&0&1360&0x0|2&4&0&1304&0x0|3&4&0&1308&0x0|4&4&15&1304&0x0|5&4&0&1300&0x0|6&4&0&1304&0x0|7&4&0&1304&0x0|8&4&0&1304&0x0|9&4&0&1300&0x0|10&4&0&1304&0x0|11&4&0&1304&0x0|12&4&0&1300&0x0|13&4&0&1300&0x0|14&4&0&1308&0x0|15&4&0&1312&0x0|16&4&0&1300&0x0|17&4&0&1312&0x0|18&4&0&1308&0x0|19&4&0&1304&0x0|20&4&0&1300&0x0', 1, 'Judger'),
(9, '肖江', 1008, 4, 0, 1400, 'C++', 2402, '2019-02-17 15:13:26', '1&4&0&1400&0x0|2&4&0&1348&0x0', 1, 'Judger'),
(10, '肖江', 1009, 4, 15, 1356, 'C++', 773, '2019-02-17 15:13:53', '1&4&0&1356&0x0|2&4&15&1308&0x0|3&4&0&1300&0x0|4&4&0&1304&0x0|5&4&0&1304&0x0', 1, 'Judger'),
(11, '肖江', 1010, 4, 15, 1356, 'C++', 529, '2019-02-17 15:14:25', '1&4&0&1356&0x0|2&4&0&1300&0x0|3&4&0&1304&0x0|4&4&0&1316&0x0|5&4&0&1304&0x0|6&4&15&1304&0x0|7&4&0&1304&0x0|8&4&15&1304&0x0|9&4&0&1300&0x0|10&4&0&1300&0x0', 1, 'Judger'),
(12, '肖江', 1011, 4, 62, 1424, 'C++', 629, '2019-02-17 15:14:57', '1&4&0&1424&0x0|2&4&0&1368&0x0|3&4&0&1372&0x0|4&4&0&1376&0x0|5&4&0&1368&0x0|6&4&0&1372&0x0|7&4&0&1372&0x0|8&4&62&1372&0x0', 1, 'Judger'),
(13, '肖江', 1012, 4, 15, 1508, 'C++', 617, '2019-02-17 15:15:25', '1&4&15&1508&0x0|2&4&15&1468&0x0|3&4&15&1472&0x0|4&4&15&1452&0x0|5&4&15&1484&0x0', 1, 'Judger'),
(14, '肖江', 1016, 4, 15, 1308, 'C++', 572, '2019-02-17 15:16:30', '1&4&15&1296&0x0|2&4&0&1296&0x0|3&4&15&1304&0x0|4&4&15&1300&0x0|5&4&15&1296&0x0|6&4&0&1300&0x0|7&4&0&1296&0x0|8&4&0&1296&0x0|9&4&0&1308&0x0|10&4&0&1296&0x0', 1, 'Judger'),
(15, '肖江', 1015, 4, 15, 1300, 'C++', 296, '2019-02-17 15:17:17', '1&4&0&1296&0x0|2&4&0&1296&0x0|3&4&0&1300&0x0|4&4&0&1296&0x0|5&4&0&1296&0x0|6&4&0&1296&0x0|7&4&0&1300&0x0|8&4&0&1300&0x0|9&4&15&1296&0x0|10&4&0&1300&0x0', 1, 'Judger'),
(16, '肖江', 1014, 4, 875, 5276, 'C++', 521, '2019-02-17 15:29:56', '1&4&15&5276&0x0|2&4&0&5220&0x0|3&4&15&5220&0x0|4&4&187&5228&0x0|5&4&875&5216&0x0', 1, 'Judger'),
(17, '肖江', 1013, 4, 15, 1364, 'C++', 704, '2019-02-17 15:30:30', '1&4&0&1364&0x0|2&4&0&1308&0x0|3&4&0&1308&0x0|4&4&15&1304&0x0|5&4&0&1308&0x0|6&4&0&1312&0x0|7&4&15&1308&0x0|8&4&15&1320&0x0|9&4&0&1312&0x0|10&4&0&1320&0x0', 1, 'Judger'),
(18, '肖江', 1000, 4, 15, 1360, 'C++', 139, '2019-02-17 16:01:47', '1&4&15&1360&0x0|2&4&0&1300&0x0|3&4&0&1304&0x0|4&4&0&1304&0x0|5&4&0&1304&0x0|6&4&0&1304&0x0|7&4&0&1308&0x0|8&4&0&1304&0x0|9&4&15&1308&0x0|10&4&0&1300&0x0', 1, 'Judger'),
(19, '肖江', 1006, 9, 890, 7372, 'C++', 1090, '2019-02-17 21:29:10', '1&4&0&1352&0x0|2&4&0&1360&0x0|6&8&890&7372&0x0|7&9&15&1364&0xc0000005|8&4&781&7208&0x0', 1, 'Judger'),
(20, '肖江', 1006, 4, 796, 7840, 'C++', 732, '2019-02-17 21:47:26', '1&4&15&3704&0x0|2&4&0&3700&0x0|6&4&796&7620&0x0|7&4&703&7272&0x0|8&4&703&7840&0x0', 1, 'Judger'),
(86, '肖江', 1030, 4, 15, 1360, 'C++', 363, '2019-04-08 11:01:42', '1&4&0&1360&0x0|2&4&0&1308&0x0|3&4&15&1308&0x0|4&4&0&1300&0x0|5&4&0&1304&0x0|6&4&0&1312&0x0|7&4&0&1304&0x0|8&4&0&1304&0x0|9&4&0&1304&0x0|10&4&0&1300&0x0', 1, 'Judger'),
(29, '肖江', 1000, 4, 187, 22080, 'Java', 279, '2019-03-14 00:11:59', '1&4&78&22024&0x0|2&4&109&22036&0x0|3&4&156&21992&0x0|4&4&140&22080&0x0|5&4&156&22044&0x0|6&4&93&21964&0x0|7&4&93&21972&0x0|8&4&93&21972&0x0|9&4&171&22036&0x0|10&4&187&21984&0x0', 1, 'Judger'),
(32, '肖江', 1017, 4, 765, 32060, 'Java', 949, '2019-03-14 14:27:38', '1&4&78&22108&0x0|2&4&125&22116&0x0|3&4&93&22196&0x0|4&4&125&23984&0x0|5&4&125&23548&0x0|6&4&765&32060&0x0', 1, 'Judger'),
(28, '肖江', 1000, 4, 15, 1400, 'C++', 174, '2019-03-11 22:22:50', '1&4&15&1400&0x0|2&4&0&1348&0x0|3&4&0&1352&0x0|4&4&0&1356&0x0|5&4&0&1356&0x0|6&4&0&1368&0x0|7&4&0&1344&0x0|8&4&0&1352&0x0|9&4&0&1356&0x0|10&4&0&1356&0x0', 1, 'Judger'),
(30, '肖江', 1001, 4, 46, 20032, 'Java', 167, '2019-03-14 13:10:02', '1&4&46&20032&0x0', 1, 'Judger'),
(31, '肖江', 1002, 4, 125, 22032, 'Java', 662, '2019-03-14 13:41:23', '1&4&125&22032&0x0', 1, 'Judger'),
(33, '肖江', 1018, 4, 343, 37092, 'Java', 467, '2019-03-14 15:00:29', '1&4&93&22092&0x0|2&4&125&22172&0x0|3&4&140&25596&0x0|4&4&343&37092&0x0|5&4&78&22064&0x0', 1, 'Judger'),
(34, '肖江', 1018, 4, 15, 1400, 'C++', 467, '2019-03-14 15:00:31', '1&4&0&1400&0x0|2&4&0&1352&0x0|3&4&0&1356&0x0|4&4&15&1356&0x0|5&4&0&1348&0x0', 1, 'Judger'),
(47, '吴泽', 1000, 4, 156, 22072, 'Java', 281, '2019-03-18 16:39:48', '1&4&125&22020&0x0|2&4&140&22004&0x0|3&4&109&22072&0x0|4&4&140&22044&0x0|5&4&156&22064&0x0|6&4&78&22016&0x0|7&4&125&22004&0x0|8&4&156&22036&0x0|9&4&62&21972&0x0|10&4&125&21976&0x0', 1, 'Judger'),
(35, '肖江', 1011, 4, 218, 33724, 'Java', 621, '2019-03-15 00:29:02', '1&4&171&22052&0x0|2&4&156&21956&0x0|3&4&156&21964&0x0|4&4&109&22060&0x0|5&4&93&22108&0x0|6&4&125&22064&0x0|7&4&78&25788&0x0|8&4&218&33724&0x0', 1, 'Judger'),
(36, '肖江', 1012, 4, 671, 44384, 'Java', 997, '2019-03-15 00:35:07', '1&4&250&23872&0x0|2&4&187&24468&0x0|3&4&281&29136&0x0|4&4&359&33352&0x0|5&4&671&44384&0x0', 1, 'Judger'),
(37, '肖江', 1012, 4, 15, 1568, 'C++', 677, '2019-03-15 00:40:54', '1&4&15&1568&0x0|2&4&0&1508&0x0|3&4&0&1524&0x0|4&4&0&1520&0x0|5&4&15&1544&0x0', 1, 'Judger'),
(51, '肖江', 1019, 4, 31, 1400, 'C++', 455, '2019-03-21 17:07:35', '1&4&0&1400&0x0|2&4&0&1348&0x0|3&4&0&1344&0x0|4&4&0&1344&0x0|5&4&31&1344&0x0|6&4&0&1344&0x0|7&4&0&1348&0x0|8&4&0&1344&0x0|9&4&0&1348&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(38, '肖江', 1000, 4, 31, 4156, 'Python', 91, '2019-03-16 22:16:20', '1&4&31&4132&0x0|2&4&31&4136&0x0|3&4&0&4136&0x0|4&4&15&4132&0x0|5&4&15&4132&0x0|6&4&15&4144&0x0|7&4&15&4112&0x0|8&4&0&4116&0x0|9&4&31&4156&0x0|10&4&15&4128&0x0', 1, 'Judger'),
(39, '肖江', 1000, 4, 46, 4156, 'Python', 91, '2019-03-16 22:22:06', '1&4&46&4124&0x0|2&4&15&4124&0x0|3&4&15&4120&0x0|4&4&15&4128&0x0|5&4&15&4156&0x0|6&4&31&4140&0x0|7&4&0&4156&0x0|8&4&15&4100&0x0|9&4&15&4100&0x0|10&4&0&4120&0x0', 1, 'Judger'),
(40, '肖江', 1001, 4, 0, 4124, 'Python', 37, '2019-03-16 22:28:43', '1&4&0&4124&0x0', 1, 'Judger'),
(41, '肖江', 1016, 4, 93, 4420, 'Python', 542, '2019-03-16 22:34:43', '1&4&15&4408&0x0|2&4&31&4388&0x0|3&4&15&4396&0x0|4&4&15&4396&0x0|5&4&31&4384&0x0|6&4&62&4364&0x0|7&4&46&4376&0x0|8&4&46&4396&0x0|9&4&93&4420&0x0|10&4&78&4376&0x0', 1, 'Judger'),
(52, '肖江', 1020, 4, 46, 4404, 'Python', 401, '2019-03-21 17:21:49', '1&4&15&4388&0x0|2&4&0&4396&0x0|3&4&15&4392&0x0|4&4&15&4380&0x0|5&4&15&4380&0x0|6&4&46&4388&0x0|7&4&15&4380&0x0|8&4&15&4364&0x0|9&4&15&4404&0x0|10&4&0&4368&0x0', 1, 'Judger'),
(53, '肖江', 1021, 4, 62, 4420, 'Python', 641, '2019-03-21 17:34:01', '1&4&15&4372&0x0|2&4&0&4384&0x0|3&4&0&4396&0x0|4&4&15&4420&0x0|5&4&0&4404&0x0|6&4&15&4400&0x0|7&4&31&4388&0x0|8&4&31&4376&0x0|9&4&46&4388&0x0|10&4&0&4392&0x0|11&4&31&4404&0x0|12&4&15&4416&0x0|13&4&15&4388&0x0|14&4&31&4384&0x0|15&4&15&4384&0x0|16&4&0&4404&0x0|17&4&15&4380&0x0|18&4&31&4392&0x0|19&4&0&4376&0x0|20&4&15&4380&0x0|21&4&31&4372&0x0|22&4&46&4416&0x0|23&4&31&4388&0x0|24&4&31&4384&0x0|25&4&15&4416&0x0|26&4&0&4388&0x0|27&4&0&4416&0x0|28&4&0&4416&0x0|29&4&62&4400&0x0|30&4&15&4360&0x0|31&4&31&4376&0x0|32&4&15&4376&0x0|33&4&15&4376&0x0|34&4&15&4364&0x0|35&4&15&4392&0x0', 1, 'Judger'),
(54, '肖江', 1021, 4, 15, 1368, 'C++', 651, '2019-03-21 17:56:54', '1&4&0&1348&0x0|2&4&0&1352&0x0|3&4&0&1352&0x0|4&4&0&1360&0x0|5&4&0&1356&0x0|6&4&0&1360&0x0|7&4&15&1352&0x0|8&4&0&1352&0x0|9&4&0&1360&0x0|10&4&15&1360&0x0|11&4&0&1352&0x0|12&4&0&1356&0x0|13&4&15&1364&0x0|14&4&15&1368&0x0|15&4&0&1356&0x0|16&4&0&1352&0x0|17&4&0&1352&0x0|18&4&0&1352&0x0|19&4&0&1364&0x0|20&4&0&1352&0x0|21&4&0&1352&0x0|22&4&15&1352&0x0|23&4&0&1348&0x0|24&4&0&1364&0x0|25&4&0&1352&0x0|26&4&0&1352&0x0|27&4&0&1352&0x0|28&4&0&1352&0x0|29&4&0&1352&0x0|30&4&15&1352&0x0|31&4&0&1356&0x0|32&4&0&1352&0x0|33&4&0&1348&0x0|34&4&0&1348&0x0|35&4&0&1348&0x0', 1, 'Judger'),
(79, '肖江', 1027, 4, 31, 1356, 'C++', 463, '2019-04-05 21:50:47', '1&4&0&1356&0x0|2&4&0&1304&0x0|3&4&0&1304&0x0|4&4&0&1304&0x0|5&4&0&1300&0x0|6&4&31&1304&0x0|7&4&15&1300&0x0|8&4&0&1300&0x0|9&4&0&1312&0x0|10&4&0&1316&0x0', 1, 'Judger'),
(59, '吴泽', 1000, 4, 156, 22128, 'Java', 252, '2019-03-22 10:23:37', '1&4&109&21992&0x0|2&4&156&22004&0x0|3&4&109&22004&0x0|4&4&156&21992&0x0|5&4&156&22040&0x0|6&4&62&22036&0x0|7&4&93&21952&0x0|8&4&125&22128&0x0|9&4&156&21988&0x0|10&4&93&21940&0x0', 1, 'Judger'),
(60, '吴泽', 1001, 8, 109, 20044, 'Java', 146, '2019-03-22 10:24:22', '1&8&109&20044&0x0', 1, 'Judger'),
(61, '吴泽', 1001, 11, -1, -1, 'Java', 25, '2019-03-22 10:25:01', '', 1, 'Judger'),
(62, '吴泽', 1001, 4, 78, 19956, 'Java', 147, '2019-03-22 10:25:15', '1&4&78&19956&0x0', 1, 'Judger'),
(63, '吴泽', 1002, 9, 109, 22104, 'Java', 323, '2019-03-22 10:32:58', '1&9&109&22104&0x1', 1, 'Judger'),
(64, '吴泽', 1002, 8, 109, 22168, 'Java', 433, '2019-03-22 10:44:34', '1&8&109&22168&0x0', 1, 'Judger'),
(65, '吴泽', 1002, 8, 125, 22132, 'Java', 440, '2019-03-22 10:46:57', '1&8&125&22132&0x0', 1, 'Judger'),
(66, '吴泽', 1002, 4, 109, 22176, 'Java', 440, '2019-03-22 10:48:13', '1&4&109&22176&0x0', 1, 'Judger'),
(67, '肖江', 1022, 4, 187, 22104, 'Java', 613, '2019-03-25 10:42:17', '1&4&109&22036&0x0|2&4&125&22048&0x0|3&4&109&22040&0x0|4&4&78&22000&0x0|5&4&187&22040&0x0|6&4&125&22096&0x0|7&4&109&22056&0x0|8&4&156&22012&0x0|9&4&109&22104&0x0|10&4&140&22016&0x0', 1, 'Judger'),
(68, '肖江', 1022, 4, 31, 1400, 'C++', 473, '2019-03-25 10:43:20', '1&4&0&1400&0x0|2&4&0&1352&0x0|3&4&0&1348&0x0|4&4&15&1360&0x0|5&4&0&1344&0x0|6&4&0&1368&0x0|7&4&31&1356&0x0|8&4&15&1344&0x0|9&4&0&1348&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(69, '肖江', 1022, 4, 62, 4412, 'Python', 372, '2019-03-25 11:10:11', '1&4&0&4380&0x0|2&4&15&4412&0x0|3&4&15&4376&0x0|4&4&15&4384&0x0|5&4&15&4388&0x0|6&4&31&4388&0x0|7&4&46&4380&0x0|8&4&62&4384&0x0|9&4&46&4400&0x0|10&4&0&4360&0x0', 1, 'Judger'),
(70, '吴泽', 1022, 4, 140, 22124, 'Java', 448, '2019-03-25 11:36:46', '1&4&78&21964&0x0|2&4&125&22068&0x0|3&4&109&22048&0x0|4&4&93&22088&0x0|5&4&125&22000&0x0|6&4&140&21988&0x0|7&4&109&22044&0x0|8&4&46&21992&0x0|9&4&78&21968&0x0|10&4&109&22124&0x0', 1, 'Judger'),
(71, '肖江', 1023, 4, 0, 1356, 'C++', 72, '2019-03-28 23:40:00', '1&4&0&1356&0x0', 1, 'Judger'),
(72, '肖江', 1023, 4, 62, 19952, 'Java', 116, '2019-03-28 23:44:05', '1&4&62&19952&0x0', 1, 'Judger'),
(73, '肖江', 1023, 4, 31, 4132, 'Python', 127, '2019-03-28 23:44:34', '1&4&31&4132&0x0', 1, 'Judger'),
(74, '肖江', 1024, 4, 78, 4160, 'Python', 127, '2019-03-29 00:14:09', '1&4&15&4116&0x0|2&4&31&4160&0x0|3&4&78&4104&0x0|4&4&62&4124&0x0|5&4&31&4132&0x0', 1, 'Judger'),
(75, '肖江', 1024, 4, 15, 1400, 'C++', 406, '2019-03-29 00:18:16', '1&4&15&1400&0x0|2&4&0&1356&0x0|3&4&0&1356&0x0|4&4&0&1352&0x0|5&4&15&1348&0x0', 1, 'Judger'),
(76, '肖江', 1025, 4, 156, 22396, 'Java', 1349, '2019-04-01 11:14:23', '1&4&140&22244&0x0|2&4&156&22204&0x0|3&4&62&22196&0x0|4&4&78&22252&0x0|5&4&78&22308&0x0|6&4&125&22304&0x0|7&4&125&22344&0x0|8&4&93&22372&0x0|9&4&140&22396&0x0|10&4&109&22016&0x0', 1, 'Judger'),
(77, '肖江', 1025, 4, 15, 1356, 'C++', 756, '2019-04-01 11:24:23', '1&4&0&1356&0x0|2&4&0&1300&0x0|3&4&15&1304&0x0|4&4&15&1304&0x0|5&4&0&1308&0x0|6&4&0&1304&0x0|7&4&0&1300&0x0|8&4&0&1304&0x0|9&4&0&1300&0x0|10&4&15&1288&0x0', 1, 'Judger'),
(78, '肖江', 1026, 4, 187, 1400, 'C++', 1134, '2019-04-05 14:13:53', '1&4&0&1400&0x0|2&4&0&1356&0x0|3&4&0&1360&0x0|4&4&15&1348&0x0|5&4&0&1348&0x0|6&4&0&1352&0x0|7&4&0&1348&0x0|8&4&15&1360&0x0|9&4&15&1356&0x0|10&4&187&1356&0x0|11&4&0&1344&0x0|12&4&0&1352&0x0|13&4&0&1356&0x0|14&4&0&1356&0x0|15&4&0&1348&0x0', 1, 'Judger'),
(80, '肖江', 1028, 4, 15, 1352, 'C++', 487, '2019-04-05 22:02:11', '1&4&0&1352&0x0|2&4&15&1300&0x0|3&4&0&1304&0x0|4&4&0&1304&0x0|5&4&0&1316&0x0|6&4&0&1308&0x0|7&4&0&1304&0x0|8&4&0&1312&0x0|9&4&0&1304&0x0|10&4&0&1304&0x0', 1, 'Judger'),
(81, '肖江', 1029, 4, 46, 1356, 'C++', 659, '2019-04-06 16:10:45', '1&4&15&1356&0x0|2&4&15&1304&0x0|3&4&0&1304&0x0|4&4&0&1304&0x0|5&4&0&1308&0x0|6&4&0&1308&0x0|7&4&15&1304&0x0|8&4&46&1300&0x0|9&4&15&1300&0x0|10&4&15&1304&0x0', 1, 'Judger'),
(82, '肖江', 1030, 4, 15, 1400, 'C++', 431, '2019-04-06 16:12:58', '1&4&15&1400&0x0|2&4&0&1348&0x0|3&4&0&1344&0x0|4&4&0&1348&0x0|5&4&0&1356&0x0|6&4&0&1356&0x0|7&4&0&1352&0x0|8&4&0&1348&0x0|9&4&15&1356&0x0|10&4&15&1344&0x0', 1, 'Judger'),
(83, '肖江', 1033, 4, 15, 1356, 'C++', 474, '2019-04-06 23:40:50', '1&4&15&1356&0x0', 1, 'Judger'),
(85, '肖江', 1031, 4, 46, 1352, 'C++', 442, '2019-04-07 00:32:23', '1&4&0&1352&0x0|2&4&0&1308&0x0|3&4&15&1308&0x0|4&4&0&1304&0x0|5&4&0&1300&0x0|6&4&0&1304&0x0|7&4&15&1308&0x0|8&4&0&1300&0x0|9&4&46&1304&0x0|10&4&0&1304&0x0', 1, 'Judger'),
(84, '肖江', 1032, 4, 15, 1356, 'C++', 292, '2019-04-07 00:23:14', '1&4&15&1356&0x0|2&4&0&1304&0x0|3&4&0&1300&0x0|4&4&0&1304&0x0|5&4&0&1300&0x0|6&4&0&1304&0x0|7&4&0&1308&0x0|8&4&15&1304&0x0|9&4&0&1308&0x0|10&4&15&1304&0x0', 1, 'Judger'),
(87, '肖江', 1030, 8, 15, 1364, 'C++', 798, '2019-04-08 11:05:34', '1&4&0&1348&0x0|2&4&0&1356&0x0|3&4&15&1348&0x0|4&4&0&1356&0x0|5&4&15&1360&0x0|6&10&0&1348&0x0|7&8&0&1364&0x0|8&4&0&1352&0x0|9&4&15&1348&0x0|10&4&0&1344&0x0', 1, 'Judger'),
(88, '肖江', 1000, 10, 15, 1356, 'C++', 123, '2019-04-08 11:34:00', '1&10&0&1356&0x0|2&10&0&1304&0x0|3&10&0&1304&0x0|4&10&0&1308&0x0|5&10&0&1304&0x0|6&10&0&1300&0x0|7&10&0&1300&0x0|8&10&0&1308&0x0|9&10&15&1312&0x0|10&10&0&1300&0x0', 1, 'Judger'),
(89, '肖江', 1034, 4, 31, 4136, 'Python', 250, '2019-04-12 17:22:23', '1&4&0&4124&0x0|2&4&15&4112&0x0|3&4&15&4112&0x0|4&4&31&4132&0x0|5&4&0&4136&0x0', 1, 'Judger'),
(90, '肖江', 1034, 4, 0, 1356, 'C++', 258, '2019-04-12 17:22:44', '1&4&0&1356&0x0|2&4&0&1300&0x0|3&4&0&1304&0x0|4&4&0&1304&0x0|5&4&0&1308&0x0', 1, 'Judger'),
(91, '肖江', 1035, 4, 78, 4160, 'Python', 195, '2019-04-12 17:36:35', '1&4&15&4116&0x0|2&4&15&4148&0x0|3&4&31&4124&0x0|4&4&78&4148&0x0|5&4&31&4128&0x0|6&4&15&4116&0x0|7&4&0&4112&0x0|8&4&31&4160&0x0|9&4&15&4112&0x0|10&4&31&4136&0x0', 1, 'Judger'),
(92, '肖江', 1035, 4, 31, 1400, 'G++', 255, '2019-04-12 17:36:55', '1&4&0&1400&0x0|2&4&0&1348&0x0|3&4&0&1360&0x0|4&4&0&1276&0x0|5&4&31&1348&0x0|6&4&15&1356&0x0|7&4&0&1352&0x0|8&4&15&1356&0x0|9&4&15&1356&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(93, '肖江', 1036, 4, 46, 4152, 'Python', 215, '2019-04-12 17:42:13', '1&4&0&4120&0x0|2&4&15&4136&0x0|3&4&0&4120&0x0|4&4&31&4132&0x0|5&4&15&4148&0x0|6&4&31&4116&0x0|7&4&0&4152&0x0|8&4&46&4132&0x0|9&4&15&4116&0x0|10&4&15&4140&0x0', 1, 'Judger'),
(94, '肖江', 1036, 4, 15, 1404, 'C++', 320, '2019-04-12 17:42:32', '1&4&0&1404&0x0|2&4&0&1360&0x0|3&4&15&1356&0x0|4&4&0&1356&0x0|5&4&0&1364&0x0|6&4&15&1356&0x0|7&4&15&1364&0x0|8&4&0&1360&0x0|9&4&0&1356&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(95, '肖江', 1037, 8, 46, 4164, 'Python', 155, '2019-04-12 17:48:52', '1&8&15&4124&0x0|2&8&31&4144&0x0|3&8&46&4144&0x0|4&8&15&4120&0x0|5&8&0&4128&0x0|6&8&15&4140&0x0|7&8&15&4156&0x0|8&8&31&4132&0x0|9&8&46&4120&0x0|10&8&15&4164&0x0', 1, 'Judger'),
(97, '肖江', 1037, 4, 31, 4144, 'Python', 173, '2019-04-12 17:59:20', '1&4&0&4120&0x0|2&4&31&4144&0x0|3&4&15&4120&0x0|4&4&15&4140&0x0|5&4&15&4112&0x0|6&4&31&4136&0x0|7&4&15&4136&0x0|8&4&0&4124&0x0|9&4&15&4144&0x0|10&4&0&4120&0x0', 1, 'Judger'),
(96, '肖江', 1037, 4, 31, 1408, 'C++', 165, '2019-04-12 17:49:43', '1&4&0&1408&0x0|2&4&31&1348&0x0|3&4&0&1360&0x0|4&4&0&1352&0x0|5&4&0&1360&0x0|6&4&0&1368&0x0|7&4&0&1352&0x0|8&4&0&1356&0x0|9&4&0&1360&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(98, '肖江', 1038, 8, 46, 4424, 'Python', 182, '2019-04-12 18:04:26', '1&8&15&4392&0x0|2&8&15&4380&0x0|3&8&31&4392&0x0|4&8&31&4384&0x0|5&8&31&4368&0x0|6&8&15&4360&0x0|7&8&31&4392&0x0|8&8&46&4408&0x0|9&8&15&4424&0x0|10&8&15&4384&0x0', 1, 'Judger'),
(99, '肖江', 1038, 4, 15, 4404, 'Python', 212, '2019-04-12 18:05:20', '1&4&0&4368&0x0|2&4&15&4372&0x0|3&4&15&4364&0x0|4&4&15&4372&0x0|5&4&15&4364&0x0|6&4&15&4364&0x0|7&4&15&4404&0x0|8&4&0&4376&0x0|9&4&15&4380&0x0|10&4&15&4388&0x0', 1, 'Judger'),
(100, '肖江', 1038, 4, 31, 1400, 'C++', 210, '2019-04-12 18:05:40', '1&4&0&1400&0x0|2&4&15&1356&0x0|3&4&31&1344&0x0|4&4&0&1344&0x0|5&4&0&1348&0x0|6&4&0&1348&0x0|7&4&0&1348&0x0|8&4&0&1356&0x0|9&4&0&1348&0x0|10&4&0&1352&0x0', 1, 'Judger'),
(101, '肖江', 1000, 8, 15, 5736, 'C++', 982, '2019-04-12 18:36:23', '1&4&15&5720&0x0|2&4&0&5716&0x0|3&4&0&5720&0x0|4&4&0&5720&0x0|5&4&15&5712&0x0|6&8&15&5720&0x0|7&4&0&5716&0x0|8&4&0&5736&0x0|9&4&0&5716&0x0|10&4&0&5724&0x0', 1, 'Judger'),
(102, '肖江', 1000, 4, 15, 1412, 'C++', 2436, '2019-04-12 18:36:55', '1&4&15&1412&0x0|2&4&0&1360&0x0|3&4&0&1356&0x0|4&4&0&1364&0x0|5&4&0&1360&0x0|6&4&0&1364&0x0|7&4&0&1356&0x0|8&4&0&1368&0x0|9&4&15&1360&0x0|10&4&0&1368&0x0', 1, 'Judger'),
(103, '肖江', 1000, 4, 140, 22140, 'Java', 335, '2019-04-12 18:37:24', '1&4&78&22104&0x0|2&4&125&22116&0x0|3&4&93&22076&0x0|4&4&140&22100&0x0|5&4&140&22140&0x0|6&4&78&22008&0x0|7&4&125&22092&0x0|8&4&78&22124&0x0|9&4&46&22096&0x0|10&4&78&22068&0x0', 1, 'Judger'),
(104, '肖江', 1000, 4, 15, 1408, 'C++', 2436, '2019-04-12 18:37:48', '1&4&0&1408&0x0|2&4&0&1368&0x0|3&4&0&1356&0x0|4&4&0&1368&0x0|5&4&15&1372&0x0|6&4&0&1356&0x0|7&4&0&1360&0x0|8&4&0&1360&0x0|9&4&0&1360&0x0|10&4&0&1368&0x0', 1, 'Judger'),
(105, '肖江', 1000, 4, 62, 1400, 'C++', 1198, '2019-04-12 18:38:04', '1&4&15&1400&0x0|2&4&0&1356&0x0|3&4&0&1356&0x0|4&4&15&1344&0x0|5&4&0&1356&0x0|6&4&0&1356&0x0|7&4&62&1348&0x0|8&4&0&1360&0x0|9&4&15&1356&0x0|10&4&0&1344&0x0', 1, 'Judger'),
(119, '肖江', 1011, 4, 250, 33612, 'Java', 949, '2019-04-22 10:28:53', '1&4&156&21944&0x0|2&4&31&22008&0x0|3&4&78&22044&0x0|4&4&93&22020&0x0|5&4&62&21968&0x0|6&4&109&22128&0x0|7&4&156&25920&0x0|8&4&250&33612&0x0', 1, 'Judger'),
(113, '肖江', 1000, 9, 31, 4172, 'Python', 40, '2019-04-20 17:08:52', '1&9&15&4160&0x1|2&9&15&4124&0x1|3&9&31&4132&0x1|4&9&0&4148&0x1|5&9&31&4172&0x1|6&9&31&4160&0x1|7&9&31&4124&0x1|8&9&15&4116&0x1|9&9&0&4136&0x1|10&9&15&4108&0x1', 1, 'Judger'),
(106, '肖江', 1039, 4, 15, 1644, 'C++', 734, '2019-04-12 20:49:04', '1&4&0&1644&0x0|2&4&15&1588&0x0|3&4&0&1588&0x0|4&4&0&1592&0x0|5&4&0&1592&0x0|6&4&0&1588&0x0|7&4&0&1588&0x0|8&4&0&1588&0x0|9&4&0&1588&0x0|10&4&15&1588&0x0', 1, 'Judger'),
(107, '肖江', 1040, 4, 62, 1392, 'C++', 355, '2019-04-12 21:17:24', '1&4&0&1392&0x0|2&4&0&1340&0x0|3&4&0&1340&0x0|4&4&0&1340&0x0|5&4&0&1348&0x0|6&4&15&1336&0x0|7&4&15&1340&0x0|8&4&31&1332&0x0|9&4&62&1336&0x0|10&4&15&1336&0x0', 1, 'Judger'),
(108, '肖江', 1041, 4, 0, 1368, 'C++', 443, '2019-04-15 16:22:09', '1&4&0&1368&0x0|2&4&0&1304&0x0|3&4&0&1300&0x0|4&4&0&1308&0x0|5&4&0&1304&0x0', 1, 'Judger'),
(109, '肖江', 1042, 4, 859, 1396, 'C++', 1102, '2019-04-16 23:24:41', '1&4&15&1396&0x0|2&4&15&1336&0x0|3&4&0&1344&0x0|4&4&15&1344&0x0|5&4&0&1348&0x0|6&4&0&1344&0x0|7&4&31&1340&0x0|8&4&718&1340&0x0|9&4&859&1336&0x0|10&4&140&1348&0x0', 1, 'Judger'),
(110, '肖江', 1042, 7, 93, 392748, 'C++', 758, '2019-04-16 23:29:50', '1&7&15&392748&0x0|2&7&0&392748&0x0|3&7&0&392744&0x0|4&7&0&392740&0x0|5&7&31&392748&0x0|6&7&15&392748&0x0|7&7&15&392744&0x0|8&7&78&392744&0x0|9&7&93&392748&0x0|10&7&15&392740&0x0', 1, 'Judger'),
(111, '肖江', 1042, 4, 93, 1396, 'C++', 648, '2019-04-17 14:07:36', '1&4&0&1396&0x0|2&4&0&1356&0x0|3&4&0&1344&0x0|4&4&0&1344&0x0|5&4&0&1348&0x0|6&4&0&1344&0x0|7&4&0&1344&0x0|8&4&93&1340&0x0|9&4&93&1344&0x0|10&4&15&1344&0x0', 1, 'Judge'),
(112, '肖江', 1042, 7, 156, 392752, 'G++', 758, '2019-04-17 14:08:45', '1&7&0&392736&0x0|2&7&0&392744&0x0|3&7&0&392744&0x0|4&7&0&392740&0x0|5&7&0&392736&0x0|6&7&0&392740&0x0|7&7&15&392736&0x0|8&7&125&392752&0x0|9&7&156&392732&0x0|10&7&31&392740&0x0', 1, 'Judger'),
(114, '肖江', 1000, 9, 31, 4172, 'Python', 42, '2019-04-20 17:15:30', '1&9&0&4148&0x1|2&9&31&4152&0x1|3&9&15&4164&0x1|4&9&31&4116&0x1|5&9&15&4168&0x1|6&9&15&4120&0x1|7&9&0&4124&0x1|8&9&15&4172&0x1|9&9&15&4128&0x1|10&9&31&4172&0x1', 1, 'Judger'),
(115, '肖江', 1000, 9, 31, 4172, 'Python', 38, '2019-04-20 17:16:14', '1&9&15&4100&0x1|2&9&15&4140&0x1|3&9&15&4124&0x1|4&9&15&4116&0x1|5&9&0&4124&0x1|6&9&31&4124&0x1|7&9&31&4136&0x1|8&9&15&4112&0x1|9&9&0&4172&0x1|10&9&0&4144&0x1', 1, 'Judger'),
(116, '肖江', 1000, 7, 1625, 333092, 'C++', 100, '2019-04-20 17:31:12', '1&7&1265&214200&0x103|2&7&1437&239924&0x103|3&7&1484&209228&0x103|4&7&1453&207584&0x103|5&7&1578&183776&0x103|6&7&1468&197540&0x103|7&7&1406&202372&0x103|8&7&1578&333092&0x103|9&7&1546&297324&0x103|10&7&1625&306488&0x103', 1, 'Judger'),
(117, '肖江', 1000, 4, 15, 1300, 'Gcc', 121, '2019-04-20 17:52:55', '1&4&0&1296&0x0|2&4&0&1296&0x0|3&4&0&1300&0x0|4&4&15&1296&0x0|5&4&15&1300&0x0|6&4&0&1300&0x0|7&4&0&1292&0x0|8&4&0&1296&0x0|9&4&0&1296&0x0|10&4&0&1296&0x0', 1, 'Judger'),
(120, '肖江', 1000, 4, 15, 1304, 'Gcc', 118, '2019-04-23 23:06:52', '1&4&0&1296&0x0|2&4&0&1296&0x0|3&4&0&1304&0x0|4&4&0&1296&0x0|5&4&15&1296&0x0|6&4&0&1296&0x0|7&4&15&1300&0x0|8&4&0&1292&0x0|9&4&0&1292&0x0|10&4&0&1296&0x0', 1, 'Judger');

-- --------------------------------------------------------

--
-- 表的结构 `oj_user`
--

CREATE TABLE IF NOT EXISTS `oj_user` (
  `name` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '用户姓名',
  `uid` int(11) NOT NULL COMMENT '用户ID',
  `password` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '用户密码',
  `jurisdicton` int(11) NOT NULL COMMENT '权限',
  `signature` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '签名',
  `email` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '邮箱',
  `regtime` date NOT NULL COMMENT '注册时间',
  `logtime` date NOT NULL COMMENT '最后登陆的时间',
  `fight` int(11) NOT NULL COMMENT '战斗力',
  `skin` varchar(11) COLLATE utf8_bin NOT NULL COMMENT 'OJ皮肤'
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- 转存表中的数据 `oj_user`
--

INSERT INTO `oj_user` (`name`, `uid`, `password`, `jurisdicton`, `signature`, `email`, `regtime`, `logtime`, `fight`, `skin`) VALUES
('肖江', 1, 'ieIAjVBw02', 2, '我不管，我最帅，我是你的小可爱               ', '751255159@qq.com', '2019-01-01', '2019-04-30', 4600, 'Slate'),
('吴泽', 2, 'wuze', 1, '嘤 嘤 嘤    ', '', '2019-02-01', '2019-04-21', 2000, 'spacelab'),
('吴泽的父亲', 3, 'wuzhoulei123.', 0, '嘤嘤怪的父亲', '1425339794@qq.com', '2019-03-18', '2019-03-18', 1000, 'spacelab'),
('张春峰', 4, 'zhangchunfeng', 0, ' 哎哟~真秀~', 'zhangchunfeng@qq.com', '2019-02-13', '2019-04-21', 1666, 'spacelab');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
